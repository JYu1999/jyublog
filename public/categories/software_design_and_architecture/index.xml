<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Software Design &amp; Architecture on Me are 結語JYu</title>
        <link>https://jyu1999.com/categories/software_design_and_architecture/</link>
        <description>Recent content in Software Design &amp; Architecture on Me are 結語JYu</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <lastBuildDate>Sun, 18 Jun 2023 15:52:19 +0800</lastBuildDate><atom:link href="https://jyu1999.com/categories/software_design_and_architecture/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>SOLID 原則（二）：OCP &amp; DIP</title>
        <link>https://jyu1999.com/post/solid-dip/</link>
        <pubDate>Sun, 18 Jun 2023 15:52:19 +0800</pubDate>
        
        <guid>https://jyu1999.com/post/solid-dip/</guid>
        <description>&lt;img src="https://jyu1999.com/post/solid-dip/0.webp" alt="Featured image of post SOLID 原則（二）：OCP &amp; DIP" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上一篇 &lt;a class=&#34;link&#34; href=&#34;https://jyu1999.com/post/solid/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SOLID 原則（一）：Top-down 看 SOLID&lt;/a&gt; 有說明了 SOLID 的目的，從這篇開始逐一解說～&lt;/p&gt;
&lt;p&gt;大多數的文章都是從 SRP 開始照順序介紹，但我自己覺得 SRP 是最難懂的&amp;hellip;&lt;/p&gt;
&lt;p&gt;所以我從我覺得比較簡單的，逐一介紹，希望能降低讀者的閱讀門檻XD&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ocpopen-closed-principle&#34;&gt;OCP(Open-Closed Principle)&lt;/h2&gt;
&lt;h2 id=&#34;what-is-ocp&#34;&gt;What is OCP?&lt;/h2&gt;
&lt;p&gt;這個原則相對簡單，我們先來看一下定義：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Objects or entities should be open for extension but closed for modification.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其實這個定義我覺得很難以理解，我們看一下 &lt;em&gt;Clean Architecture&lt;/em&gt; 這本書是怎麼說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;軟體製品的行為應該是可擴展的，而且沒必要修改該製品&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們再來看一下&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;維基百科&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;這意味著一個實體是允許在不改變它的原始碼的前提下變更它的行為&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家可以想一下，假設我裝了一個 Google Chrome 的 plugin，是要把每個頁面的字都變成白色的。&lt;/p&gt;
&lt;p&gt;如果這個 plugin 直接去改 Chrome 的原始碼，會發生什麼事情呢？&lt;/p&gt;
&lt;p&gt;首先可能是如果 plugin 要改很多地方的話，之後可能會很難把它改回來。&lt;/p&gt;
&lt;p&gt;再來，怎麼確認改了這些地方，不會造成其他地方的 bug？&lt;/p&gt;
&lt;p&gt;因此，比較理想的方式是，這個 plugin 可能會去繼承（or implement）Google Chrome 用來控制字體的 Class（or Interface），然後去覆蓋掉原本的設定。&lt;/p&gt;
&lt;p&gt;這樣我可以保證其他用到這個 Class(Interface) 的程式不會出問題，到時候要改回去也很簡單。&lt;/p&gt;
&lt;p&gt;如果想看範例的，可以看看 &lt;a class=&#34;link&#34; href=&#34;https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design#open-closed-principle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SOLID: The First 5 Principles of Object Oriented Design&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dipdependency-inversion-principle&#34;&gt;DIP(Dependency Inversion Principle)&lt;/h2&gt;
&lt;h3 id=&#34;what-is-dip&#34;&gt;What is DIP?&lt;/h3&gt;
&lt;p&gt;一樣，先來看一下定義：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定義看不懂沒關係，但最好先記著，下面的解釋會一直圍繞著定義。&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;我們先來看看實際的範例（&lt;a class=&#34;link&#34; href=&#34;https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design#dependency-inversion-principle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;範例來源&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;假設我們今天要實作一個 &lt;code&gt;PasswordReminder&lt;/code&gt; 的 Class&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MySQLConnection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// handle the database connection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Database connection&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordReminder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $dbConnection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct(&lt;span style=&#34;color:#a6e22e&#34;&gt;MySQLConnection&lt;/span&gt; $dbConnection)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dbConnection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbConnection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這個 &lt;code&gt;MySQLConnection&lt;/code&gt; 就是 low-level module，&lt;code&gt;PasswordReminder&lt;/code&gt; 是 high-level module。&lt;/p&gt;
&lt;p&gt;但根據定義：&lt;em&gt;high-level module must not depend on the low-level module&lt;/em&gt;，我們知道 &lt;code&gt;PasswordReminder&lt;/code&gt; 依賴 &lt;code&gt;MySQLConnection&lt;/code&gt; 是違反 DIP 的。&lt;code&gt;PasswordReminder&lt;/code&gt; 應該要 &lt;em&gt;depend on abstractions&lt;/em&gt; 才對。&lt;/p&gt;
&lt;p&gt;知道是知道啦，但是為什麼不行？我們可以試想一個情況：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主管突然宣布：「從今天開始，我們的 Database 不用 MySQL 了，改用 PostgreSQL 吧！」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這時候工程師可能需要寫一個新的 &lt;code&gt;PostgreSQLConnection&lt;/code&gt;，然後更改 &lt;code&gt;PasswordReminder&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordReminder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $dbConnection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct(&lt;span style=&#34;color:#a6e22e&#34;&gt;PostgreSQLConnection&lt;/span&gt; $dbConnection)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dbConnection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbConnection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;乍看之下很合理，但仔細想想就會有不對勁了：&lt;strong&gt;我換個 DB Driver，甘 &lt;code&gt;PasswordReminder&lt;/code&gt; 什麼事啊？&lt;/strong&gt;
而且其實也違反了 OCP。&lt;/p&gt;
&lt;p&gt;也就是說，&lt;code&gt;PasswordReminder&lt;/code&gt; 其實不需要知道底層是用什麼資料庫實現的，它所需要的只是建立連線而已。&lt;/p&gt;
&lt;p&gt;ok，所以我們可以把 &lt;code&gt;connect()&lt;/code&gt; 這個行為「抽象化」，讓 &lt;code&gt;MySQLConnection&lt;/code&gt; 這個 low-level module，&lt;code&gt;PasswordReminder&lt;/code&gt; 這個 high-level module，都可以 &lt;em&gt;depend on abstraction&lt;/em&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DBConnectionInterface&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這個 interface 只有一個 &lt;code&gt;connect()&lt;/code&gt; method，然後 &lt;code&gt;MySQLConnection&lt;/code&gt; 會去 implements 這個 interface。&lt;/p&gt;
&lt;p&gt;此外，在 &lt;code&gt;PasswordReminder&lt;/code&gt; 裡面，我們也可以把 type hint 換成 &lt;code&gt;DBConnectionInterface&lt;/code&gt;，不用再去管用到什麼 DB Driver 了！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MySQLConnection&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DBConnectionInterface&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//MySQLConnection 去 implements 這個 interface
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// handle the database connection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Database connection&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordReminder&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $dbConnection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct(&lt;span style=&#34;color:#a6e22e&#34;&gt;DBConnectionInterface&lt;/span&gt; $dbConnection) &lt;span style=&#34;color:#75715e&#34;&gt;//把 type hint 換成 DBConnectionInterface
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dbConnection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $dbConnection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以如果有人需要用到 &lt;code&gt;PasswordReminder&lt;/code&gt; 這個功能的話，在使用的時候就要一併指定 DB Driver:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordReminder&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;MySQLConnection&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後如果老闆提出要換資料庫的話，我們就新增一個 &lt;code&gt;PostgreConnection&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostgreConnection&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DBConnectionInterface&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// handle the database connection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Database connection&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 要使用 PasswordReminder 的話：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PasswordReminder&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PostgreSQLConnection&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣的做法其實是一種將低層模組(low-level module)的控制權從原來的高層模組(high-level module)中抽離，將兩者的耦合只放在抽象層(abstraction)上。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;過猶不及&#34;&gt;過猶不及&lt;/h3&gt;
&lt;p&gt;那可能有人會想到，如果我們用更宏觀的角度來看系統的話，我們寫的 code 不是一樣依賴於 Framework 和 Database，甚至是 Operation System 嗎？&lt;/p&gt;
&lt;p&gt;是也沒錯，但我們可以來看看 &lt;em&gt;Clean Architecture&lt;/em&gt; 怎麼說：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;我們想要避免依賴的是系統中 &lt;strong&gt;容易變化&lt;/strong&gt; 的具體元素&lt;/em&gt;。它們是我們正在發展且正在經常變化模組。&lt;/p&gt;
&lt;p&gt;基於上述理由，在應用 DIP 時，我們傾向於忽略作業系統和平台機制的穩定背景。我們容忍那些具體的依賴關係，因為我們信任它們不會改變。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以其實我們可以忽略對於 DB, Framework 乃至於 OS 的依賴～&lt;/p&gt;
&lt;h2 id=&#34;留白&#34;&gt;留白&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;😅
其實本來還想寫更多的，但考量到這篇文章設定是給初入 SOLID 的人看的，就先留白吧～&lt;del&gt;絕對不是因為我自己也看不懂&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;但怕有些人求知慾太旺盛，提供一些關鍵字以供參考&lt;/p&gt;
&lt;p&gt;在 OCP 的部分，本來想要補充實際應用案例。（Controller, Presenter, Interactor 那些）&lt;/p&gt;
&lt;p&gt;在 DIP 的部分，還想要補充 Factory Pattern 和 &lt;em&gt;Clean Architecture&lt;/em&gt; 提到的編碼實戰守則。&lt;/p&gt;
&lt;p&gt;就留給大家自己研究，也有可能我有空會再寫 XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@ChunYeung/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E4%BE%9D%E8%B3%B4%E5%8F%8D%E5%90%91%E5%8E%9F%E5%89%87-dependency-inversion-principle-a74ca045d776&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使人瘋狂的 SOLID 原則：依賴反向原則 (Dependency Inversion Principle)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>SOLID 原則（一）：Top-down 看 SOLID</title>
        <link>https://jyu1999.com/post/solid/</link>
        <pubDate>Sun, 18 Jun 2023 12:14:11 +0800</pubDate>
        
        <guid>https://jyu1999.com/post/solid/</guid>
        <description>&lt;img src="https://jyu1999.com/post/solid/0.jpeg" alt="Featured image of post SOLID 原則（一）：Top-down 看 SOLID" /&gt;&lt;p&gt;(封面圖片來源：https://www.linkedin.com/pulse/solid-principles-razneeknth-pradhan/)&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在幾個月前我正在求職時，看到很多職缺上面都有提到「SOLID」這個關鍵字，當時的我只大概知道 SOLID 是有關於物件導向的一種設計原則，但具體裡面每個原則在幹嘛也不太清楚。&lt;/p&gt;
&lt;p&gt;直到最近終於有空好好來看一下這個大名鼎鼎（？）的 SOLID，看了很多文章，不管中文英文的，都覺得有看沒有懂，於是想要寫文章整理一下自己的思緒。&lt;/p&gt;
&lt;p&gt;由於我也只是初步研究，不敢保證正確性，如果有覺得任何值得討論的地方，歡迎跟我說喔～&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;solid-是什麼為什麼需要&#34;&gt;SOLID 是什麼？為什麼需要？&lt;/h2&gt;
&lt;p&gt;SOLID 是五個設計原則的縮寫，分別為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRP: 單一職責原則&lt;/li&gt;
&lt;li&gt;OCP: 開放-封閉原則&lt;/li&gt;
&lt;li&gt;LSP: Liskov 替換原則&lt;/li&gt;
&lt;li&gt;ISP: 介面隔離原則&lt;/li&gt;
&lt;li&gt;DIP: 依賴反向原則&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們在後續文章會再解釋每一個原則的細節，在這篇文章我想著重在「目標」上。&lt;/p&gt;
&lt;p&gt;我們先來看一下 &lt;em&gt;Clean Architecture&lt;/em&gt; 這本書對於 SOLID 目標的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;這些原則的目標是建立中層級的軟體架構，這樣的結構包含：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;能容忍變化&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;容易理解&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;是在許多軟體系統中能夠使用的元件的基礎&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;ok，我在看這句話的時候產生了兩個疑惑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中層級是什麼？&lt;/li&gt;
&lt;li&gt;元件是什麼？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;元件component&#34;&gt;元件（Component）&lt;/h3&gt;
&lt;p&gt;因為中層級的解釋涉及到元件，所以我們先看到第二個問題，元件是什麼？&lt;/p&gt;
&lt;p&gt;在 &lt;em&gt;Clean Architecture&lt;/em&gt; 裡面是這樣定義的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;元件（Component）是部署（Deployment）的單位。&lt;/em&gt;
&lt;em&gt;他們是系統在部署時最小的部分實體。&lt;/em&gt;
&lt;em&gt;在 Java 中，他們是 jar 檔。&lt;/em&gt;
&lt;em&gt;在 Ruby 中，他們是 Gem 檔。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果舉一反三的話，在 PHP 中，Composer package 應該就是元件？&lt;/p&gt;
&lt;h3 id=&#34;中層級&#34;&gt;中層級&lt;/h3&gt;
&lt;h4 id=&#34;中層級的架構&#34;&gt;中層級的架構&lt;/h4&gt;
&lt;p&gt;我們再來看第一個問題，在 &lt;em&gt;Clean Architecture&lt;/em&gt; 的說明如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;「中層級」是指這些原則是程式設計師在模組層級工作時應用的原則。他們應用在程式碼層級之上，並且有助於定義模組和元件內使用的軟體結構類型。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ok，這邊又出現了一個新名詞：模組（module）。&lt;/p&gt;
&lt;p&gt;模組和元件有何不同，我想這很難有一個明確的定義。不過我個人是同意在 &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/2702816/module-vs-component-design&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這篇文章&lt;/a&gt; 的回答所看到的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Both component and module are used to refer to a group of functions or a part of a function. Module is more logical, for example: module Finance, module HR, module Manufacturing&amp;hellip; in ERP system. On the other hand, component is more physical. In software, it can be a dll, ocx, exe,&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;怕有人看不懂，協助翻譯一下XD。以一個 ERP 系統來說，所謂的模組可能有「金流模組」、「人力管理模組」、「製造管理模組」。而為了要去實作一個「製造管理模組」，我們可能需要很多的元件。大家可以想像，我們有時候在實作一個功能的時候，是不是也需要引用很多的套件呢？&lt;/p&gt;
&lt;p&gt;所以我們也許可以這樣理解「中層級」：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工程師會寫一行一行的 Code，這些 Code 屬於「程式碼層級」；&lt;/li&gt;
&lt;li&gt;一行一行的 Code 組成了一個 Class，成為「類別層級」；&lt;/li&gt;
&lt;li&gt;很多個 Class 組合而成一個「元件」，成為「元件層級」；&lt;/li&gt;
&lt;li&gt;很多個「元件」組合起來，變成「模組」，成為「模組層級」；&lt;/li&gt;
&lt;li&gt;很多個「模組」組合起來，最終成為「系統層級」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而所謂中層級，就是「程式碼層級」、「類別層級」、「元件層級」、「模組層級」的集合。至於「系統層級」算不算在「中層級」，我自己覺得不算～&lt;/p&gt;
&lt;h4 id=&#34;中層級的工作&#34;&gt;中層級的工作&lt;/h4&gt;
&lt;p&gt;到這邊我又有疑惑了，所以「中層級」到底主要在幹嘛？&lt;/p&gt;
&lt;p&gt;在 &lt;em&gt;Clean Architecture&lt;/em&gt; 裡面有一張圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jyu1999.com/post/solid/1.jpg&#34;
	width=&#34;655&#34;
	height=&#34;481&#34;
	srcset=&#34;https://jyu1999.com/post/solid/1_hu749f096a81d823dd1826a8206967e9a8_79931_480x0_resize_q75_box.jpg 480w, https://jyu1999.com/post/solid/1_hu749f096a81d823dd1826a8206967e9a8_79931_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;來源：https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在這個架構中，愈外圈被視為愈低層，而內圈被視為高層。&lt;/p&gt;
&lt;p&gt;我們其實可以這樣理解：「離I/O（輸入、輸出）越遠的元件層級越高，離I/O越近的層級越低」。這其實也很容易理解，在公司中，櫃台小姐離I/O（接電話、接待訪客）最近，通常層級比較低。董事長、總經理離I/O很遠，層級最高（通常看高階主管的辦公室位置離大門遠近就可猜出層級高低XD）。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;所以我們大概可以知道，所謂的「中層級」就是 Use Cases 和 Interface Adapters 這兩層。而這兩層大概在幹嘛呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Cases Layer: 簡單解釋的話，就是該應用的核心商業邏輯。&lt;/li&gt;
&lt;li&gt;Interface Adapters Layer: 我們所熟知的 MVC 架構其實就在這一層，&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;📕
其實我自己也沒有很了解這兩層的具體差異在哪裡，上網找是有人說，可能要軟體架構足夠大才會有感覺QAQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具體每一層在幹嘛，大家可以參考 &lt;a class=&#34;link&#34; href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Uncle Bob 的網站&lt;/a&gt;，會有比較詳細的解說。&lt;/p&gt;
&lt;h3 id=&#34;小結&#34;&gt;小結&lt;/h3&gt;
&lt;p&gt;ok，我們了解了元件和中層級，我們再重新回頭看一下 SOLID 的目標：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;這些原則的目標是建立中層級的軟體架構，這樣的結構包含：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;能容忍變化&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;容易理解&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;是在許多軟體系統中能夠使用的元件的基礎&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;有更看得懂 SOLID 的目標了嗎（拜託說有🥺），一言以蔽之的話，SOLID 原則就是在幫助我們建造更「乾淨」的中層級。&lt;/p&gt;
&lt;p&gt;這個中層級是要能容忍變化的，不能需求一變，就要大改程式碼。而且這個架構是要能容易被理解的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;solid-的手段&#34;&gt;SOLID 的手段？&lt;/h2&gt;
&lt;p&gt;那具體來說，SOLID 原則能怎麼協助我們呢？一樣，我們看 &lt;em&gt;Clean Architecture&lt;/em&gt; 裡面是怎麼說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;SOLID 原則告訴我們該如何將我們的函式和資料結構安排到類別（Class）中，以及這些類別該如何相互關聯。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我很喜歡書中對於 Clean Code（整潔的程式碼） 和 Clean Architecture 的比喻：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;從某方面來說，如果磚塊（Code）做得不好，那麼建築物的架構（Architecture）也就不重要了。
從另一方面來說，你也能用精心製作的磚塊來製造大量的垃圾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，我們平時寫 Code 的習慣（規範？），例如有意義的 function 名稱、一行不能超過幾個字等等，就是屬於 Clean Code 的範疇。&lt;/p&gt;
&lt;p&gt;我們寫 Code 的習慣愈好，做出來的磚頭就愈精良。但光是磚頭精良是不夠的，如果亂拼的話還是可能會出問題。&lt;/p&gt;
&lt;p&gt;所以我們需要仔細思考，哪個磚頭要放在哪裡，才能讓房子更加穩固。&lt;/p&gt;
&lt;p&gt;而這個「磚頭要放在哪裡」的 Guideline 就是 SOLID 原則。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在這一篇中我簡單講解了為什麼需要 SOLID 原則。&lt;/p&gt;
&lt;p&gt;接下來我會從 OCP 開始，針對每一個原則逐一解說。&lt;/p&gt;
&lt;p&gt;如果有任何問題，歡迎討論！&lt;/p&gt;
&lt;p&gt;👉 下一篇：&lt;a class=&#34;link&#34; href=&#34;https://jyu1999.com/post/solid-dip/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SOLID 原則（二）：OCP &amp;amp; DIP&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://teddy-chen-tw.blogspot.com/2018/07/clean-architecture4.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clean Architecture（4）：架構三原則首部曲—分層原則&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
